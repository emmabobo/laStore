generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql / sqlite / mongodb
  url      = env("DATABASE_URL")
}

// === NextAuth Models ===
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cartItems     CartItem[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// === E-Commerce Models ===
model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // Only one cart item per product per user
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  total      Float
  status     String      @default("pending") // pending, paid, shipped
  createdAt  DateTime    @default(now())
  orderItems OrderItem[]

  user       User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}
